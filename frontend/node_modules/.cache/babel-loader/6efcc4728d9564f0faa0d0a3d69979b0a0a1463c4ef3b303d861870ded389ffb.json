{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useState } from 'react';\nimport useApi from './useApi';\nimport { toast } from 'react-toastify';\nimport useAuth from './useAuth';\nconst usePatients = () => {\n  _s();\n  const {\n    get,\n    loading,\n    error\n  } = useApi();\n  const [patients, setPatients] = useState([]);\n  const {\n    user\n  } = useAuth();\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        console.log(\"use patients\");\n        if (user && user.token) {\n          console.log(\"user token: \" + JSON.stringify(user));\n          const fetchedPatients = await get('/patients/list', user.token);\n          if (fetchedPatients) {\n            setPatients(fetchedPatients);\n          } else {\n            toast.error(\"Error fetching patients\");\n          }\n        }\n      } catch (error) {\n        toast.error('Error fetching patients');\n      }\n      ;\n    };\n    fetchData();\n  }, [user, patients]);\n  return {\n    patients,\n    loading,\n    error\n  };\n};\n_s(usePatients, \"V8HlJEnLYpNN7MQk4rHFcU7HDy4=\", false, function () {\n  return [useApi, useAuth];\n});\nexport default usePatients;","map":{"version":3,"names":["useEffect","useState","useApi","toast","useAuth","usePatients","_s","get","loading","error","patients","setPatients","user","fetchData","console","log","token","JSON","stringify","fetchedPatients"],"sources":["C:/Users/Yaman/GitHub/JournalSystem/frontend/src/hooks/usePatients.js"],"sourcesContent":["import { useEffect, useState } from 'react';\r\nimport useApi from './useApi';\r\nimport { toast } from 'react-toastify';\r\nimport useAuth from './useAuth';\r\n\r\nconst usePatients = () => {\r\n  const { get, loading, error } = useApi();\r\n  const [patients, setPatients] = useState([]);\r\n  \r\n  const {user} = useAuth();\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try{\r\n        console.log(\"use patients\")\r\n        if (user && user.token) {\r\n          console.log(\"user token: \" + JSON.stringify(user))\r\n\r\n          const fetchedPatients = await get('/patients/list', user.token);\r\n\r\n          if (fetchedPatients) {\r\n            setPatients(fetchedPatients);\r\n          } else {\r\n            toast.error(\"Error fetching patients\")\r\n          }\r\n        }\r\n      } catch (error) {\r\n        toast.error('Error fetching patients');\r\n      };\r\n    };\r\n\r\n    fetchData();\r\n  }, [user, patients]);\r\n\r\n  return { patients, loading, error };\r\n};\r\n\r\nexport default usePatients;\r\n"],"mappings":";AAAA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC3C,OAAOC,MAAM,MAAM,UAAU;AAC7B,SAASC,KAAK,QAAQ,gBAAgB;AACtC,OAAOC,OAAO,MAAM,WAAW;AAE/B,MAAMC,WAAW,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACxB,MAAM;IAAEC,GAAG;IAAEC,OAAO;IAAEC;EAAM,CAAC,GAAGP,MAAM,CAAC,CAAC;EACxC,MAAM,CAACQ,QAAQ,EAAEC,WAAW,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EAE5C,MAAM;IAACW;EAAI,CAAC,GAAGR,OAAO,CAAC,CAAC;EAExBJ,SAAS,CAAC,MAAM;IACd,MAAMa,SAAS,GAAG,MAAAA,CAAA,KAAY;MAC5B,IAAG;QACDC,OAAO,CAACC,GAAG,CAAC,cAAc,CAAC;QAC3B,IAAIH,IAAI,IAAIA,IAAI,CAACI,KAAK,EAAE;UACtBF,OAAO,CAACC,GAAG,CAAC,cAAc,GAAGE,IAAI,CAACC,SAAS,CAACN,IAAI,CAAC,CAAC;UAElD,MAAMO,eAAe,GAAG,MAAMZ,GAAG,CAAC,gBAAgB,EAAEK,IAAI,CAACI,KAAK,CAAC;UAE/D,IAAIG,eAAe,EAAE;YACnBR,WAAW,CAACQ,eAAe,CAAC;UAC9B,CAAC,MAAM;YACLhB,KAAK,CAACM,KAAK,CAAC,yBAAyB,CAAC;UACxC;QACF;MACF,CAAC,CAAC,OAAOA,KAAK,EAAE;QACdN,KAAK,CAACM,KAAK,CAAC,yBAAyB,CAAC;MACxC;MAAC;IACH,CAAC;IAEDI,SAAS,CAAC,CAAC;EACb,CAAC,EAAE,CAACD,IAAI,EAAEF,QAAQ,CAAC,CAAC;EAEpB,OAAO;IAAEA,QAAQ;IAAEF,OAAO;IAAEC;EAAM,CAAC;AACrC,CAAC;AAACH,EAAA,CA9BID,WAAW;EAAA,QACiBH,MAAM,EAGvBE,OAAO;AAAA;AA4BxB,eAAeC,WAAW"},"metadata":{},"sourceType":"module","externalDependencies":[]}