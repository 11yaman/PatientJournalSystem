{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Yaman\\\\GitHub\\\\JournalSystem\\\\frontend\\\\src\\\\pages\\\\employee\\\\MessageDetails.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MessageReplies = () => {\n  _s();\n  const {\n    messageId\n  } = useParams(); // Assuming you get the messageId from the URL\n  const [messageWithReplies, setMessageWithReplies] = useState([]);\n\n  // Fetch message with replies\n  const mockMessageWithReplies = [{\n    id: 1,\n    content: 'Hello!',\n    dateTime: '2023-11-05T17:31:52.384',\n    sender: {\n      id: 1,\n      email: 'patient@example.com',\n      firstName: 'John',\n      lastName: 'Doe',\n      role: 'PATIENT'\n    },\n    replies: [{\n      id: 2,\n      content: 'Hi there!',\n      dateTime: '2023-11-05T17:35:00.000',\n      sender: {\n        id: 1,\n        email: 'employee@example.com',\n        firstName: 'Emily',\n        lastName: 'Smith',\n        role: 'EMPLOYEE'\n      }\n    }\n    // More replies can be added\n    ]\n  }];\n\n  useEffect(() => {\n    // Fetch messageWithReplies data for the specific message using 'messageId'\n    // For this example, setting the mock messageWithReplies for the specified message\n    setMessageWithReplies(mockMessageWithReplies);\n  }, [messageId]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Message\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [messageWithReplies.map(message => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: message.sender.role === 'PATIENT' ? 'Sent by Patient:' : `Reply by Employee: ${message.sender.firstName} (${message.sender.email})`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: message.content\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Sent at: \", message.dateTime]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 13\n        }, this)]\n      }, message.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 11\n      }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"Type your reply\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          children: \"Reply\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 5\n  }, this);\n};\n_s(MessageReplies, \"T+q2iJ/vaJsyL12DFCsCbjyaORo=\", false, function () {\n  return [useParams];\n});\n_c = MessageReplies;\nexport default MessageReplies;\nvar _c;\n$RefreshReg$(_c, \"MessageReplies\");","map":{"version":3,"names":["React","useEffect","useState","useParams","jsxDEV","_jsxDEV","MessageReplies","_s","messageId","messageWithReplies","setMessageWithReplies","mockMessageWithReplies","id","content","dateTime","sender","email","firstName","lastName","role","replies","children","fileName","_jsxFileName","lineNumber","columnNumber","map","message","type","placeholder","_c","$RefreshReg$"],"sources":["C:/Users/Yaman/GitHub/JournalSystem/frontend/src/pages/employee/MessageDetails.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\n\r\nconst MessageReplies = () => {\r\n  const { messageId } = useParams(); // Assuming you get the messageId from the URL\r\n  const [messageWithReplies, setMessageWithReplies] = useState([]);\r\n\r\n  // Fetch message with replies\r\n  const mockMessageWithReplies = [\r\n    {\r\n      id: 1,\r\n      content: 'Hello!',\r\n      dateTime: '2023-11-05T17:31:52.384',\r\n      sender: {\r\n        id: 1,\r\n        email: 'patient@example.com',\r\n        firstName: 'John',\r\n        lastName: 'Doe',\r\n        role: 'PATIENT',\r\n      },\r\n      replies: [\r\n        {\r\n          id: 2,\r\n          content: 'Hi there!',\r\n          dateTime: '2023-11-05T17:35:00.000',\r\n          sender: {\r\n            id: 1,\r\n            email: 'employee@example.com',\r\n            firstName: 'Emily',\r\n            lastName: 'Smith',\r\n            role: 'EMPLOYEE',\r\n          },\r\n        },\r\n        // More replies can be added\r\n      ],\r\n    },\r\n  ];\r\n\r\n  useEffect(() => {\r\n    // Fetch messageWithReplies data for the specific message using 'messageId'\r\n    // For this example, setting the mock messageWithReplies for the specified message\r\n    setMessageWithReplies(mockMessageWithReplies);\r\n  }, [messageId]);\r\n\r\n  return (\r\n    <div>\r\n      <h1>Message</h1>\r\n      <div>\r\n        {messageWithReplies.map((message) => (\r\n          <div key={message.id}>\r\n            <p>\r\n              {message.sender.role === 'PATIENT'\r\n                ? 'Sent by Patient:'\r\n                : `Reply by Employee: ${message.sender.firstName} (${message.sender.email})`}\r\n            </p>\r\n            <p>{message.content}</p>\r\n            <p>Sent at: {message.dateTime}</p>\r\n          </div>\r\n        ))}\r\n        {/* Add a reply field for the logged-in user (Employee) */}\r\n        <div>\r\n          <input type=\"text\" placeholder=\"Type your reply\" />\r\n          <button>Reply</button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MessageReplies;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}