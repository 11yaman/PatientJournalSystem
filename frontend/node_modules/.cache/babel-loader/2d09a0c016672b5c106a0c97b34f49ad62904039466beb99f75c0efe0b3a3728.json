{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport { fetchMessageWithReplies } from '../apis/MessageApi';\nimport { toast } from 'react-toastify';\nconst useMessageWithReplies = messageId => {\n  _s();\n  const [message, setMessage] = useState();\n  const [loading, setLoading] = useState(true);\n  const {\n    user\n  } = useAuth();\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        if (user && user.token) {\n          const fetchedMessage = await fetchMessageWithReplies(messageId, user.token);\n          if (fetchedMessage) {\n            // Update the state with the fetched message\n            setMessage(fetchedMessage);\n          } else {\n            // Display an error toast if there was an issue fetching the message\n            toast.error('Error fetching message with replies');\n          }\n        }\n      } catch (apiError) {\n        // Display an error toast if there was an issue with the API call\n        toast.error('Error fetching message with replies');\n      } finally {\n        // Set loading to false once the data has been fetched or an error occurred\n        setLoading(false);\n      }\n    };\n\n    // Call the fetchData function when the component mounts or when messageId changes\n    fetchData();\n  }, [messageId]);\n\n  // Return the fetched message and loading state\n  return {\n    message,\n    loading\n  };\n};\n_s(useMessageWithReplies, \"/uRbOnL0hLDfynFYw9nKQ8ZA7Vc=\", true);\nexport default useMessageWithReplies;","map":{"version":3,"names":["useState","useEffect","fetchMessageWithReplies","toast","useMessageWithReplies","messageId","_s","message","setMessage","loading","setLoading","user","useAuth","fetchData","token","fetchedMessage","error","apiError"],"sources":["C:/Users/Yaman/GitHub/JournalSystem/frontend/src/hooks/useMessageWithReplies.js"],"sourcesContent":["import { useState, useEffect } from 'react';\r\nimport { fetchMessageWithReplies } from '../apis/MessageApi';\r\nimport { toast } from 'react-toastify';\r\n\r\nconst useMessageWithReplies = (messageId) => {\r\n  const [message, setMessage] = useState();\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  const {user} = useAuth()\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n\r\n        if (user && user.token) {\r\n          const fetchedMessage = await fetchMessageWithReplies(messageId, user.token);\r\n\r\n          if (fetchedMessage) {\r\n            // Update the state with the fetched message\r\n            setMessage(fetchedMessage);\r\n          } else {\r\n            // Display an error toast if there was an issue fetching the message\r\n            toast.error('Error fetching message with replies');\r\n          }\r\n        }\r\n      } catch (apiError) {\r\n        // Display an error toast if there was an issue with the API call\r\n        toast.error('Error fetching message with replies');\r\n      } finally {\r\n        // Set loading to false once the data has been fetched or an error occurred\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    // Call the fetchData function when the component mounts or when messageId changes\r\n    fetchData();\r\n  }, [messageId]);\r\n\r\n  // Return the fetched message and loading state\r\n  return { message, loading };\r\n};\r\n\r\nexport default useMessageWithReplies;\r\n"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC3C,SAASC,uBAAuB,QAAQ,oBAAoB;AAC5D,SAASC,KAAK,QAAQ,gBAAgB;AAEtC,MAAMC,qBAAqB,GAAIC,SAAS,IAAK;EAAAC,EAAA;EAC3C,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGR,QAAQ,CAAC,CAAC;EACxC,MAAM,CAACS,OAAO,EAAEC,UAAU,CAAC,GAAGV,QAAQ,CAAC,IAAI,CAAC;EAE5C,MAAM;IAACW;EAAI,CAAC,GAAGC,OAAO,CAAC,CAAC;EAExBX,SAAS,CAAC,MAAM;IACd,MAAMY,SAAS,GAAG,MAAAA,CAAA,KAAY;MAC5B,IAAI;QAEF,IAAIF,IAAI,IAAIA,IAAI,CAACG,KAAK,EAAE;UACtB,MAAMC,cAAc,GAAG,MAAMb,uBAAuB,CAACG,SAAS,EAAEM,IAAI,CAACG,KAAK,CAAC;UAE3E,IAAIC,cAAc,EAAE;YAClB;YACAP,UAAU,CAACO,cAAc,CAAC;UAC5B,CAAC,MAAM;YACL;YACAZ,KAAK,CAACa,KAAK,CAAC,qCAAqC,CAAC;UACpD;QACF;MACF,CAAC,CAAC,OAAOC,QAAQ,EAAE;QACjB;QACAd,KAAK,CAACa,KAAK,CAAC,qCAAqC,CAAC;MACpD,CAAC,SAAS;QACR;QACAN,UAAU,CAAC,KAAK,CAAC;MACnB;IACF,CAAC;;IAED;IACAG,SAAS,CAAC,CAAC;EACb,CAAC,EAAE,CAACR,SAAS,CAAC,CAAC;;EAEf;EACA,OAAO;IAAEE,OAAO;IAAEE;EAAQ,CAAC;AAC7B,CAAC;AAACH,EAAA,CApCIF,qBAAqB;AAsC3B,eAAeA,qBAAqB"},"metadata":{},"sourceType":"module","externalDependencies":[]}