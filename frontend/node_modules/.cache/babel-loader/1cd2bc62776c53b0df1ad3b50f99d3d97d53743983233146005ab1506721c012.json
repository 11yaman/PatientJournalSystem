{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Yaman\\\\GitHub\\\\JournalSystem\\\\frontend\\\\src\\\\pages\\\\employee\\\\MessageDetails.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MessageDetails = () => {\n  _s();\n  const {\n    messageId\n  } = useParams(); // Assuming you get the messageId from the URL\n  const [messageWithReplies, setMessageWithReplies] = useState([]);\n\n  // Fetch message with replies\n  const mockMessageWithReplies = [{\n    id: 1,\n    content: 'hej',\n    dateTime: '2023-11-05T17:31:52.384',\n    sender: {\n      id: 1,\n      email: 'yaman',\n      firstName: 'Yaman',\n      lastName: 'A',\n      role: 'PATIENT'\n    },\n    status: 'ACTIVE',\n    replies: [{\n      id: 6,\n      content: 'reply1',\n      dateTime: '2023-11-10T22:59:01.052195',\n      sender: {\n        id: 1,\n        email: 'yaman',\n        firstName: 'Yaman',\n        lastName: 'A',\n        role: 'PATIENT'\n      }\n    }, {\n      id: 7,\n      content: 'reply2',\n      dateTime: '2023-11-10T23:01:29.942987',\n      sender: {\n        id: 2,\n        email: 'noor',\n        firstName: 'Noor',\n        lastName: 'A',\n        role: 'EMPLOYEE'\n      }\n    }]\n  }];\n  useEffect(() => {\n    // Fetch messageWithReplies data for the specific message using 'messageId'\n    // For this example, setting the mock messageWithReplies for the specified message\n    setMessageWithReplies(mockMessageWithReplies);\n  }, [messageId]);\n  const renderMessage = (message, isReply) => /*#__PURE__*/_jsxDEV(\"div\", {\n    className: isReply ? 'ml-3 bg-light p-3 rounded' : '',\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"'Sent by Patient:' $\", message.sender.firstName, \" ($\", message.sender.email, \")`\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: message.content\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Sent at: \", message.dateTime]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this), message.replies && message.replies.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: message.replies.map((reply, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"border rounded p-2 my-2\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: reply.content\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Sent by: \", reply.sender && `${reply.sender.firstName} (${reply.sender.email})`, \", at \", new Date(reply.dateTime).toLocaleString]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 15\n        }, this)]\n      }, reply.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 9\n    }, this)]\n  }, message.id, true, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 5\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Message details\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [messageWithReplies.map(message => renderMessage(message, false)), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mt-3\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"Type your reply\",\n          className: \"form-control\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn btn-primary mt-2\",\n          children: \"Reply\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 82,\n    columnNumber: 5\n  }, this);\n};\n_s(MessageDetails, \"T+q2iJ/vaJsyL12DFCsCbjyaORo=\", false, function () {\n  return [useParams];\n});\n_c = MessageDetails;\nexport default MessageDetails;\nvar _c;\n$RefreshReg$(_c, \"MessageDetails\");","map":{"version":3,"names":["React","useEffect","useState","useParams","jsxDEV","_jsxDEV","MessageDetails","_s","messageId","messageWithReplies","setMessageWithReplies","mockMessageWithReplies","id","content","dateTime","sender","email","firstName","lastName","role","status","replies","renderMessage","message","isReply","className","children","fileName","_jsxFileName","lineNumber","columnNumber","length","map","reply","index","Date","toLocaleString","type","placeholder","_c","$RefreshReg$"],"sources":["C:/Users/Yaman/GitHub/JournalSystem/frontend/src/pages/employee/MessageDetails.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\n\r\nconst MessageDetails = () => {\r\n  const { messageId } = useParams(); // Assuming you get the messageId from the URL\r\n  const [messageWithReplies, setMessageWithReplies] = useState([]);\r\n\r\n  // Fetch message with replies\r\n  const mockMessageWithReplies = [\r\n    {\r\n      id: 1,\r\n      content: 'hej',\r\n      dateTime: '2023-11-05T17:31:52.384',\r\n      sender: {\r\n        id: 1,\r\n        email: 'yaman',\r\n        firstName: 'Yaman',\r\n        lastName: 'A',\r\n        role: 'PATIENT',\r\n      },\r\n      status: 'ACTIVE',\r\n      replies: [\r\n        {\r\n          id: 6,\r\n          content: 'reply1',\r\n          dateTime: '2023-11-10T22:59:01.052195',\r\n          sender: {\r\n            id: 1,\r\n            email: 'yaman',\r\n            firstName: 'Yaman',\r\n            lastName: 'A',\r\n            role: 'PATIENT',\r\n          },\r\n        },\r\n        {\r\n          id: 7,\r\n          content: 'reply2',\r\n          dateTime: '2023-11-10T23:01:29.942987',\r\n          sender: {\r\n            id: 2,\r\n            email: 'noor',\r\n            firstName: 'Noor',\r\n            lastName: 'A',\r\n            role: 'EMPLOYEE',\r\n          },\r\n        },\r\n      ],\r\n    },\r\n  ];\r\n\r\n  useEffect(() => {\r\n    // Fetch messageWithReplies data for the specific message using 'messageId'\r\n    // For this example, setting the mock messageWithReplies for the specified message\r\n    setMessageWithReplies(mockMessageWithReplies);\r\n  }, [messageId]);\r\n\r\n  const renderMessage = (message, isReply) => (\r\n    <div key={message.id} className={isReply ? 'ml-3 bg-light p-3 rounded' : ''}>\r\n      <p>\r\n        'Sent by Patient:' ${message.sender.firstName} (${message.sender.email})`\r\n      </p>\r\n      <p>{message.content}</p>\r\n      <p>Sent at: {message.dateTime}</p>\r\n      {message.replies && message.replies.length > 0 && (\r\n        <div>\r\n          {message.replies.map((reply, index) => (\r\n            <div key={reply.id} className=\"border rounded p-2 my-2\">\r\n              <p>{reply.content}</p>\r\n              <p>Sent by: {reply.sender && `${reply.sender.firstName} (${reply.sender.email})`} \r\n                  , at {new Date(reply.dateTime).toLocaleString}</p>\r\n              <p>\r\n                \r\n              </p>\r\n            </div>\r\n          ))}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n\r\n  return (\r\n    <div>\r\n      <h1>Message details</h1>\r\n      <div>\r\n        {messageWithReplies.map((message) => renderMessage(message, false))}\r\n        <div className=\"mt-3\">\r\n          <input type=\"text\" placeholder=\"Type your reply\" className=\"form-control\" />\r\n          <button className=\"btn btn-primary mt-2\">Reply</button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MessageDetails;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}