{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nconst useMessages = (type, patientId) => {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const {\n    user\n  } = useAuth();\n  useEffect(() => {\n    const fetchMessages = async () => {\n      setLoading(true);\n      let url;\n      if (type === 'all') {\n        url = '/messages/all';\n      } else if (type === 'active') {\n        url = '/messages/active';\n      } else if (type === 'archived') {\n        url = '/messages/archived';\n      } else if (type === 'patient' && patientId) {\n        url = `/patient/${patientId}/messages`;\n      } else {\n        console.error('Invalid arguments for useMessages');\n        return;\n      }\n      const fetchData = async () => {\n        try {\n          if (user && user.token) {\n            const fetchedNotes = await get(`/patients/${patientId}/notes/list`, user.token);\n            if (fetchedNotes) {\n              setMessages(fetchedNotes);\n            } else {\n              toast.error('Error fetching patient messages');\n            }\n          }\n        } catch (apiError) {\n          toast.error('Error fetching patient messages');\n        }\n      };\n    };\n    fetchData();\n  }, [type, patientId]);\n  return {\n    messages,\n    loading\n  };\n};\n_s(useMessages, \"5LLiQKqJQ9/1u7NqvoWsqZE+3iM=\", true);\nexport default useMessages;","map":{"version":3,"names":["useState","useEffect","useMessages","type","patientId","_s","messages","setMessages","loading","setLoading","user","useAuth","fetchMessages","url","console","error","fetchData","token","fetchedNotes","get","toast","apiError"],"sources":["C:/Users/Yaman/GitHub/JournalSystem/frontend/src/hooks/useMessages.js"],"sourcesContent":["import { useState, useEffect } from 'react';\r\n\r\nconst useMessages = (type, patientId) => {\r\n  const [messages, setMessages] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  const {user} = useAuth()\r\n\r\n\r\n  useEffect(() => {\r\n    const fetchMessages = async () => {\r\n      setLoading(true);\r\n\r\n      let url;\r\n\r\n      if (type === 'all') {\r\n        url = '/messages/all';\r\n      } else if (type === 'active') {\r\n        url = '/messages/active';\r\n      } else if (type === 'archived') {\r\n        url = '/messages/archived';\r\n      } else if (type === 'patient' && patientId) {\r\n        url = `/patient/${patientId}/messages`;\r\n      } else {\r\n        console.error('Invalid arguments for useMessages');\r\n        return;\r\n      }\r\n      const fetchData = async () => {\r\n        try {\r\n          if (user && user.token ) {\r\n            const fetchedNotes = await get(`/patients/${patientId}/notes/list`, user.token);\r\n  \r\n            if (fetchedNotes) {\r\n              setMessages(fetchedNotes);\r\n            } else {\r\n              toast.error('Error fetching patient messages');\r\n            }\r\n          }\r\n        } catch (apiError) {\r\n          toast.error('Error fetching patient messages');\r\n        }\r\n      }\r\n    };\r\n\r\n    fetchData();\r\n  }, [type, patientId]);\r\n\r\n  return { messages, loading };\r\n};\r\n\r\nexport default useMessages;"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAE3C,MAAMC,WAAW,GAAGA,CAACC,IAAI,EAAEC,SAAS,KAAK;EAAAC,EAAA;EACvC,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACQ,OAAO,EAAEC,UAAU,CAAC,GAAGT,QAAQ,CAAC,KAAK,CAAC;EAE7C,MAAM;IAACU;EAAI,CAAC,GAAGC,OAAO,CAAC,CAAC;EAGxBV,SAAS,CAAC,MAAM;IACd,MAAMW,aAAa,GAAG,MAAAA,CAAA,KAAY;MAChCH,UAAU,CAAC,IAAI,CAAC;MAEhB,IAAII,GAAG;MAEP,IAAIV,IAAI,KAAK,KAAK,EAAE;QAClBU,GAAG,GAAG,eAAe;MACvB,CAAC,MAAM,IAAIV,IAAI,KAAK,QAAQ,EAAE;QAC5BU,GAAG,GAAG,kBAAkB;MAC1B,CAAC,MAAM,IAAIV,IAAI,KAAK,UAAU,EAAE;QAC9BU,GAAG,GAAG,oBAAoB;MAC5B,CAAC,MAAM,IAAIV,IAAI,KAAK,SAAS,IAAIC,SAAS,EAAE;QAC1CS,GAAG,GAAI,YAAWT,SAAU,WAAU;MACxC,CAAC,MAAM;QACLU,OAAO,CAACC,KAAK,CAAC,mCAAmC,CAAC;QAClD;MACF;MACA,MAAMC,SAAS,GAAG,MAAAA,CAAA,KAAY;QAC5B,IAAI;UACF,IAAIN,IAAI,IAAIA,IAAI,CAACO,KAAK,EAAG;YACvB,MAAMC,YAAY,GAAG,MAAMC,GAAG,CAAE,aAAYf,SAAU,aAAY,EAAEM,IAAI,CAACO,KAAK,CAAC;YAE/E,IAAIC,YAAY,EAAE;cAChBX,WAAW,CAACW,YAAY,CAAC;YAC3B,CAAC,MAAM;cACLE,KAAK,CAACL,KAAK,CAAC,iCAAiC,CAAC;YAChD;UACF;QACF,CAAC,CAAC,OAAOM,QAAQ,EAAE;UACjBD,KAAK,CAACL,KAAK,CAAC,iCAAiC,CAAC;QAChD;MACF,CAAC;IACH,CAAC;IAEDC,SAAS,CAAC,CAAC;EACb,CAAC,EAAE,CAACb,IAAI,EAAEC,SAAS,CAAC,CAAC;EAErB,OAAO;IAAEE,QAAQ;IAAEE;EAAQ,CAAC;AAC9B,CAAC;AAACH,EAAA,CA9CIH,WAAW;AAgDjB,eAAeA,WAAW"},"metadata":{},"sourceType":"module","externalDependencies":[]}