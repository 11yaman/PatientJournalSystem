{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Yaman\\\\GitHub\\\\JournalSystem\\\\frontend\\\\src\\\\pages\\\\employee\\\\PatientNotes.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport Spinner from '../../components/Spinner';\nimport useNotes from '../../hooks/useNotes';\nimport { toast } from 'react-toastify';\nimport useApi from '../../hooks/useApi'; // Make sure to import the useApi hook\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Notes = () => {\n  _s();\n  const {\n    patientId\n  } = useParams();\n  const {\n    post\n  } = useApi(); // Initialize the post function from useApi hook\n  const [content, setContent] = useState(''); // State to hold the content of the new note\n\n  const {\n    notes: patientNotes,\n    loading\n  } = useNotes(patientId);\n  const [notes, setNotes] = useState([]);\n  const navigate = useNavigate();\n  useEffect(() => {\n    setNotes(patientNotes);\n  }, [patientId, patientNotes]);\n  const handleCreateNote = async () => {\n    if (!content) {\n      toast.error('Please fill in required field');\n      return;\n    }\n    try {\n      const result = await post(`/patients/${patientId}/notes`, {\n        text: content\n      }, user.token);\n      console.log(result);\n      if (result) {\n        toast.success('Note created successfully');\n        navigate('/');\n      } else {\n        toast.error('Error creating note');\n      }\n    } catch (err) {\n      toast.error('Error creating note');\n    }\n  };\n  const renderNotes = note => /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"ml-3 bg-light p-3 rounded mb-3\",\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Written by: \", note.employee.firstName, \" \", note.employee.lastName, \" (\", note.employee.email, \")\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: note.text\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this), note.encounter && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Encounter: \", note.encounter.toLocaleString()]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 26\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Created at: \", new Date(note.dateTimeCreated).toLocaleString()]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this)]\n  }, note.id, true, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Notes for patient\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this), loading ? /*#__PURE__*/_jsxDEV(Spinner, {\n      splash: \"Loading Note Details...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [notes.map(note => renderNotes(note)), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mt-3\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"Type new note\",\n          className: \"form-control\",\n          value: content,\n          onChange: e => setContent(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn btn-primary my-3\",\n          onClick: handleCreateNote,\n          children: \"New Note\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 5\n  }, this);\n};\n_s(Notes, \"v77ind9RcVaLNlY0FJVSUl18L0U=\", false, function () {\n  return [useParams, useApi, useNotes, useNavigate];\n});\n_c = Notes;\nexport default Notes;\nvar _c;\n$RefreshReg$(_c, \"Notes\");","map":{"version":3,"names":["React","useEffect","useState","useParams","useNavigate","Spinner","useNotes","toast","useApi","jsxDEV","_jsxDEV","Notes","_s","patientId","post","content","setContent","notes","patientNotes","loading","setNotes","navigate","handleCreateNote","error","result","text","user","token","console","log","success","err","renderNotes","note","className","children","employee","firstName","lastName","email","fileName","_jsxFileName","lineNumber","columnNumber","encounter","toLocaleString","Date","dateTimeCreated","id","splash","map","type","placeholder","value","onChange","e","target","onClick","_c","$RefreshReg$"],"sources":["C:/Users/Yaman/GitHub/JournalSystem/frontend/src/pages/employee/PatientNotes.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { useParams, useNavigate } from 'react-router-dom';\r\nimport Spinner from '../../components/Spinner';\r\nimport useNotes from '../../hooks/useNotes';\r\nimport { toast } from 'react-toastify';\r\nimport useApi from '../../hooks/useApi'; // Make sure to import the useApi hook\r\n\r\nconst Notes = () => {\r\n  const { patientId } = useParams();\r\n  const { post } = useApi(); // Initialize the post function from useApi hook\r\n  const [content, setContent] = useState(''); // State to hold the content of the new note\r\n\r\n  const { notes: patientNotes, loading } = useNotes(patientId);\r\n  const [notes, setNotes] = useState([]);\r\n  const navigate = useNavigate();\r\n\r\n  useEffect(() => {\r\n    setNotes(patientNotes);\r\n  }, [patientId, patientNotes]);\r\n\r\n  const handleCreateNote = async () => {\r\n    if (!content) {\r\n      toast.error('Please fill in required field');\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const result = await post(`/patients/${patientId}/notes`, { text: content }, user.token);\r\n      console.log(result);\r\n\r\n      if (result) {\r\n        toast.success('Note created successfully');\r\n        navigate('/');\r\n      } else {\r\n        toast.error('Error creating note');\r\n      }\r\n    } catch (err) {\r\n      toast.error('Error creating note');\r\n    }\r\n  };\r\n\r\n  const renderNotes = (note) => (\r\n    <div key={note.id} className='ml-3 bg-light p-3 rounded mb-3'>\r\n      <p>\r\n        Written by: {note.employee.firstName} {note.employee.lastName} ({note.employee.email})\r\n      </p>\r\n      <p>{note.text}</p>\r\n      {note.encounter && <p>Encounter: {note.encounter.toLocaleString()}</p>}\r\n      <p>Created at: {new Date(note.dateTimeCreated).toLocaleString()}</p>\r\n    </div>\r\n  );\r\n\r\n  return (\r\n    <div>\r\n      <h1>Notes for patient</h1>\r\n      {loading ? (\r\n        <Spinner splash='Loading Note Details...' />\r\n      ) : (\r\n        <div>\r\n          {notes.map((note) => renderNotes(note))}\r\n          <div className='mt-3'>\r\n            <input\r\n              type='text'\r\n              placeholder='Type new note'\r\n              className='form-control'\r\n              value={content}\r\n              onChange={(e) => setContent(e.target.value)}\r\n            />\r\n            <button className='btn btn-primary my-3' onClick={handleCreateNote}>\r\n              New Note\r\n            </button>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Notes;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}