{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Yaman\\\\GitHub\\\\JournalSystem\\\\frontend\\\\src\\\\pages\\\\PatientMessages.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PatientMessages = () => {\n  _s();\n  const {\n    patientId\n  } = useParams();\n  const [messages, setMessages] = useState([]);\n  useEffect(() => {\n    // Fetch messages for the specific patient using 'patientId'\n    // Assuming you have a function to fetch messages, replace 'fetchPatientMessages' with the appropriate function\n    fetchPatientMessages(patientId).then(data => {\n      setMessages(data);\n    }).catch(error => {\n      console.error('Error fetching messages:', error);\n      // Handle error, show a message, etc.\n    });\n  }, [patientId]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [\"Messages for Patient \", patientId]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: messages.length === 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"No messages found for this patient.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: messages.map(message => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: message.content\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 31,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Sent by: \", message.sender.firstName, \" \", message.sender.lastName]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 32,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Sent at: \", message.dateTime]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 33,\n            columnNumber: 17\n          }, this)]\n        }, message.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 5\n  }, this);\n};\n_s(PatientMessages, \"O9OWKQkH2wrnaa1ko/OTKsmPHw0=\", false, function () {\n  return [useParams];\n});\n_c = PatientMessages;\nexport default PatientMessages;\nvar _c;\n$RefreshReg$(_c, \"PatientMessages\");","map":{"version":3,"names":["React","useEffect","useState","useParams","jsxDEV","_jsxDEV","PatientMessages","_s","patientId","messages","setMessages","fetchPatientMessages","then","data","catch","error","console","children","fileName","_jsxFileName","lineNumber","columnNumber","length","map","message","content","sender","firstName","lastName","dateTime","id","_c","$RefreshReg$"],"sources":["C:/Users/Yaman/GitHub/JournalSystem/frontend/src/pages/PatientMessages.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\n\r\nconst PatientMessages = () => {\r\n  const { patientId } = useParams();\r\n  const [messages, setMessages] = useState([]);\r\n\r\n  useEffect(() => {\r\n    // Fetch messages for the specific patient using 'patientId'\r\n    // Assuming you have a function to fetch messages, replace 'fetchPatientMessages' with the appropriate function\r\n    fetchPatientMessages(patientId)\r\n      .then((data) => {\r\n        setMessages(data);\r\n      })\r\n      .catch((error) => {\r\n        console.error('Error fetching messages:', error);\r\n        // Handle error, show a message, etc.\r\n      });\r\n  }, [patientId]);\r\n\r\n  return (\r\n    <div>\r\n      <h1>Messages for Patient {patientId}</h1>\r\n      <div>\r\n        {messages.length === 0 ? (\r\n          <p>No messages found for this patient.</p>\r\n        ) : (\r\n          <ul>\r\n            {messages.map((message) => (\r\n              <li key={message.id}>\r\n                <p>{message.content}</p>\r\n                <p>Sent by: {message.sender.firstName} {message.sender.lastName}</p>\r\n                <p>Sent at: {message.dateTime}</p>\r\n              </li>\r\n            ))}\r\n          </ul>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PatientMessages;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,SAAS,QAAQ,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE7C,MAAMC,eAAe,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC5B,MAAM;IAAEC;EAAU,CAAC,GAAGL,SAAS,CAAC,CAAC;EACjC,MAAM,CAACM,QAAQ,EAAEC,WAAW,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EAE5CD,SAAS,CAAC,MAAM;IACd;IACA;IACAU,oBAAoB,CAACH,SAAS,CAAC,CAC5BI,IAAI,CAAEC,IAAI,IAAK;MACdH,WAAW,CAACG,IAAI,CAAC;IACnB,CAAC,CAAC,CACDC,KAAK,CAAEC,KAAK,IAAK;MAChBC,OAAO,CAACD,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;MAChD;IACF,CAAC,CAAC;EACN,CAAC,EAAE,CAACP,SAAS,CAAC,CAAC;EAEf,oBACEH,OAAA;IAAAY,QAAA,gBACEZ,OAAA;MAAAY,QAAA,GAAI,uBAAqB,EAACT,SAAS;IAAA;MAAAU,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,eACzChB,OAAA;MAAAY,QAAA,EACGR,QAAQ,CAACa,MAAM,KAAK,CAAC,gBACpBjB,OAAA;QAAAY,QAAA,EAAG;MAAmC;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC,gBAE1ChB,OAAA;QAAAY,QAAA,EACGR,QAAQ,CAACc,GAAG,CAAEC,OAAO,iBACpBnB,OAAA;UAAAY,QAAA,gBACEZ,OAAA;YAAAY,QAAA,EAAIO,OAAO,CAACC;UAAO;YAAAP,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC,eACxBhB,OAAA;YAAAY,QAAA,GAAG,WAAS,EAACO,OAAO,CAACE,MAAM,CAACC,SAAS,EAAC,GAAC,EAACH,OAAO,CAACE,MAAM,CAACE,QAAQ;UAAA;YAAAV,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC,eACpEhB,OAAA;YAAAY,QAAA,GAAG,WAAS,EAACO,OAAO,CAACK,QAAQ;UAAA;YAAAX,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC;QAAA,GAH3BG,OAAO,CAACM,EAAE;UAAAZ,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAIf,CACL;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACA;IACL;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;AAACd,EAAA,CArCID,eAAe;EAAA,QACGH,SAAS;AAAA;AAAA4B,EAAA,GAD3BzB,eAAe;AAuCrB,eAAeA,eAAe;AAAC,IAAAyB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}