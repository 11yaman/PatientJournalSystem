{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport { fetchMessageWithReplies } from '../apis/MessageApi';\nimport { toast } from 'react-toastify';\nimport useAuth from './useAuth';\nconst useMessageWithReplies = messageId => {\n  _s();\n  const [message, setMessage] = useState();\n  const {\n    user\n  } = useAuth();\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        if (user && user.token) {\n          const fetchedMessage = await fetchMessageWithReplies(messageId, user.token);\n          if (fetchedMessage) {\n            setMessage(fetchedMessage);\n          } else {\n            toast.error('Error fetching message with replies');\n          }\n        }\n      } catch (apiError) {\n        toast.error('Error fetching message with replies');\n      }\n    };\n\n    // Call the fetchData function when the component mounts or when messageId changes\n    fetchData();\n  }, [messageId]);\n\n  // Return the fetched message and loading state\n  return {\n    message,\n    loading\n  };\n};\n_s(useMessageWithReplies, \"EMOqnAfhEqKQFv/M+Dn2LMuxKO8=\", false, function () {\n  return [useAuth];\n});\nexport default useMessageWithReplies;","map":{"version":3,"names":["useState","useEffect","fetchMessageWithReplies","toast","useAuth","useMessageWithReplies","messageId","_s","message","setMessage","user","fetchData","token","fetchedMessage","error","apiError","loading"],"sources":["C:/Users/Yaman/GitHub/JournalSystem/frontend/src/hooks/useMessageWithReplies.js"],"sourcesContent":["import { useState, useEffect } from 'react';\r\nimport { fetchMessageWithReplies } from '../apis/MessageApi';\r\nimport { toast } from 'react-toastify';\r\nimport useAuth from './useAuth';\r\n\r\nconst useMessageWithReplies = (messageId) => {\r\n  const [message, setMessage] = useState();\r\n\r\n  const {user} = useAuth()\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n\r\n        if (user && user.token) {\r\n          const fetchedMessage = await fetchMessageWithReplies(messageId, user.token);\r\n\r\n          if (fetchedMessage) {\r\n            setMessage(fetchedMessage);\r\n          } else {\r\n            toast.error('Error fetching message with replies');\r\n          }\r\n        }\r\n      } catch (apiError) {\r\n        toast.error('Error fetching message with replies');\r\n      } \r\n    };\r\n\r\n    // Call the fetchData function when the component mounts or when messageId changes\r\n    fetchData();\r\n  }, [messageId]);\r\n\r\n  // Return the fetched message and loading state\r\n  return { message, loading };\r\n};\r\n\r\nexport default useMessageWithReplies;\r\n"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC3C,SAASC,uBAAuB,QAAQ,oBAAoB;AAC5D,SAASC,KAAK,QAAQ,gBAAgB;AACtC,OAAOC,OAAO,MAAM,WAAW;AAE/B,MAAMC,qBAAqB,GAAIC,SAAS,IAAK;EAAAC,EAAA;EAC3C,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGT,QAAQ,CAAC,CAAC;EAExC,MAAM;IAACU;EAAI,CAAC,GAAGN,OAAO,CAAC,CAAC;EAExBH,SAAS,CAAC,MAAM;IACd,MAAMU,SAAS,GAAG,MAAAA,CAAA,KAAY;MAC5B,IAAI;QAEF,IAAID,IAAI,IAAIA,IAAI,CAACE,KAAK,EAAE;UACtB,MAAMC,cAAc,GAAG,MAAMX,uBAAuB,CAACI,SAAS,EAAEI,IAAI,CAACE,KAAK,CAAC;UAE3E,IAAIC,cAAc,EAAE;YAClBJ,UAAU,CAACI,cAAc,CAAC;UAC5B,CAAC,MAAM;YACLV,KAAK,CAACW,KAAK,CAAC,qCAAqC,CAAC;UACpD;QACF;MACF,CAAC,CAAC,OAAOC,QAAQ,EAAE;QACjBZ,KAAK,CAACW,KAAK,CAAC,qCAAqC,CAAC;MACpD;IACF,CAAC;;IAED;IACAH,SAAS,CAAC,CAAC;EACb,CAAC,EAAE,CAACL,SAAS,CAAC,CAAC;;EAEf;EACA,OAAO;IAAEE,OAAO;IAAEQ;EAAQ,CAAC;AAC7B,CAAC;AAACT,EAAA,CA7BIF,qBAAqB;EAAA,QAGVD,OAAO;AAAA;AA4BxB,eAAeC,qBAAqB"},"metadata":{},"sourceType":"module","externalDependencies":[]}