{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Yaman\\\\GitHub\\\\JournalSystem\\\\frontend\\\\src\\\\pages\\\\employee\\\\PatientMessages.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { useParams, Link } from \"react-router-dom\";\nimport useMessages from \"../hooks/useMessages\";\nimport Spinner from \"../components/Spinner\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PatientMessages = () => {\n  _s();\n  const {\n    id\n  } = useParams();\n  //const { messages, loading } = useMessages(); // Assuming useMessages fetches messages from the backend\n  const [patientMessages, setPatientMessages] = useState([]);\n  useEffect(() => {\n    // Fetch messages for the specific patient using 'patientId'\n    // Assuming you have a function to fetch messages, replace 'fetchPatientMessages' with the appropriate function\n    /*fetchPatientMessages(patientId)\r\n      .then((data) => {\r\n        setMessages(data);\r\n      })\r\n      .catch((error) => {\r\n        console.error('Error fetching messages:', error);\r\n        // Handle error, show a message, etc.\r\n      });*/\n    setMessages(mockMessages);\n  }, [id, messages]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [\"Messages for Patient ID: \", id]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Link, {\n      to: \"/allpatients\",\n      className: \"btn btn-danger my-2\",\n      children: \"Back to All Patients\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"hr\", {\n      className: \"my-4\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this), loading ? /*#__PURE__*/_jsxDEV(Spinner, {\n      splash: \"Loading Messages...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: patientMessages.length === 0 ? /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"No messages for this patient\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 13\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"table\", {\n          className: \"table table-hover\",\n          children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n            children: /*#__PURE__*/_jsxDEV(\"tr\", {\n              className: \"table-dark\",\n              children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                scope: \"col\",\n                children: \"Message ID\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 44,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                scope: \"col\",\n                children: \"Content\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 45,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                scope: \"col\",\n                children: \"Date & Time\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 46,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 43,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 42,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n            children: patientMessages.map(message => /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                children: message.id\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 52,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: message.content\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 53,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: new Date(message.dateTime).toLocaleString()\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 54,\n                columnNumber: 23\n              }, this)]\n            }, message.id, true, {\n              fileName: _jsxFileName,\n              lineNumber: 51,\n              columnNumber: 21\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 49,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 5\n  }, this);\n};\n_s(PatientMessages, \"JDqA1q9scUoG+3YMJPcc8fWnsiI=\", false, function () {\n  return [useParams];\n});\n_c = PatientMessages;\nexport default PatientMessages;\nvar _c;\n$RefreshReg$(_c, \"PatientMessages\");","map":{"version":3,"names":["React","useState","useEffect","useParams","Link","useMessages","Spinner","jsxDEV","_jsxDEV","PatientMessages","_s","id","patientMessages","setPatientMessages","setMessages","mockMessages","messages","children","fileName","_jsxFileName","lineNumber","columnNumber","to","className","loading","splash","length","scope","map","message","content","Date","dateTime","toLocaleString","_c","$RefreshReg$"],"sources":["C:/Users/Yaman/GitHub/JournalSystem/frontend/src/pages/employee/PatientMessages.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { useParams, Link } from \"react-router-dom\";\r\nimport useMessages from \"../hooks/useMessages\";\r\nimport Spinner from \"../components/Spinner\";\r\n\r\nconst PatientMessages = () => {\r\n  const { id } = useParams();\r\n  //const { messages, loading } = useMessages(); // Assuming useMessages fetches messages from the backend\r\n  const [patientMessages, setPatientMessages] = useState([]);\r\n\r\n    \r\n  useEffect(() => {\r\n    // Fetch messages for the specific patient using 'patientId'\r\n    // Assuming you have a function to fetch messages, replace 'fetchPatientMessages' with the appropriate function\r\n    /*fetchPatientMessages(patientId)\r\n      .then((data) => {\r\n        setMessages(data);\r\n      })\r\n      .catch((error) => {\r\n        console.error('Error fetching messages:', error);\r\n        // Handle error, show a message, etc.\r\n      });*/\r\n    setMessages(mockMessages);\r\n  }, [id, messages]);\r\n\r\n  return (\r\n    <div>\r\n      <h1>Messages for Patient ID: {id}</h1>\r\n      <Link to=\"/allpatients\" className=\"btn btn-danger my-2\">\r\n        Back to All Patients\r\n      </Link>\r\n      <hr className=\"my-4\" />\r\n      {loading ? (\r\n        <Spinner splash=\"Loading Messages...\" />\r\n      ) : (\r\n        <div>\r\n          {patientMessages.length === 0 ? (\r\n            <h3>No messages for this patient</h3>\r\n          ) : (\r\n            <div>\r\n              <table className=\"table table-hover\">\r\n                <thead>\r\n                  <tr className=\"table-dark\">\r\n                    <th scope=\"col\">Message ID</th>\r\n                    <th scope=\"col\">Content</th>\r\n                    <th scope=\"col\">Date & Time</th>\r\n                  </tr>\r\n                </thead>\r\n                <tbody>\r\n                  {patientMessages.map((message) => (\r\n                    <tr key={message.id}>\r\n                      <td>{message.id}</td>\r\n                      <td>{message.content}</td>\r\n                      <td>{new Date(message.dateTime).toLocaleString()}</td>\r\n                    </tr>\r\n                  ))}\r\n                </tbody>\r\n              </table>\r\n            </div>\r\n          )}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PatientMessages;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}