{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nconst useMessages = (type, patientId) => {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [loading, setLoading] = useState(false);\n  useEffect(() => {\n    const fetchMessages = async () => {\n      setLoading(true);\n      try {\n        let url;\n\n        // Determine the URL based on the type of messages\n        if (type === 'all') {\n          url = '/messages/all';\n        } else if (type === 'active') {\n          url = '/messages/active';\n        } else if (type === 'archived') {\n          url = '/messages/archived';\n        } else if (type === 'patient' && patientId) {\n          url = `/patient/${patientId}/messages`;\n        } else {\n          console.error('Invalid arguments for useMessages');\n          return;\n        }\n\n        // Fetch messages based on the determined URL\n        const response = await fetch(url);\n        const data = await response.json();\n        setMessages(data);\n      } catch (error) {\n        console.error('Error fetching messages', error);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchMessages();\n  }, [type, patientId]);\n  return {\n    messages,\n    loading\n  };\n};\n_s(useMessages, \"OWiw6xYK6UqySRWWjzGN6db1MoE=\");\nexport default useMessages;","map":{"version":3,"names":["useState","useEffect","useMessages","type","patientId","_s","messages","setMessages","loading","setLoading","fetchMessages","url","console","error","response","fetch","data","json"],"sources":["C:/Users/Yaman/GitHub/JournalSystem/frontend/src/hooks/useMessages.js"],"sourcesContent":["import { useState, useEffect } from 'react';\r\n\r\nconst useMessages = (type, patientId) => {\r\n  const [messages, setMessages] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  useEffect(() => {\r\n    const fetchMessages = async () => {\r\n      setLoading(true);\r\n\r\n      try {\r\n        let url;\r\n\r\n        // Determine the URL based on the type of messages\r\n        if (type === 'all') {\r\n          url = '/messages/all';\r\n        } else if (type === 'active') {\r\n          url = '/messages/active';\r\n        } else if (type === 'archived') {\r\n          url = '/messages/archived';\r\n        } else if (type === 'patient' && patientId) {\r\n          url = `/patient/${patientId}/messages`;\r\n        } else {\r\n          console.error('Invalid arguments for useMessages');\r\n          return;\r\n        }\r\n\r\n        // Fetch messages based on the determined URL\r\n        const response = await fetch(url);\r\n        const data = await response.json();\r\n\r\n        setMessages(data);\r\n      } catch (error) {\r\n        console.error('Error fetching messages', error);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchMessages();\r\n  }, [type, patientId]);\r\n\r\n  return { messages, loading };\r\n};\r\n\r\nexport default useMessages;\r\n"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAE3C,MAAMC,WAAW,GAAGA,CAACC,IAAI,EAAEC,SAAS,KAAK;EAAAC,EAAA;EACvC,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACQ,OAAO,EAAEC,UAAU,CAAC,GAAGT,QAAQ,CAAC,KAAK,CAAC;EAE7CC,SAAS,CAAC,MAAM;IACd,MAAMS,aAAa,GAAG,MAAAA,CAAA,KAAY;MAChCD,UAAU,CAAC,IAAI,CAAC;MAEhB,IAAI;QACF,IAAIE,GAAG;;QAEP;QACA,IAAIR,IAAI,KAAK,KAAK,EAAE;UAClBQ,GAAG,GAAG,eAAe;QACvB,CAAC,MAAM,IAAIR,IAAI,KAAK,QAAQ,EAAE;UAC5BQ,GAAG,GAAG,kBAAkB;QAC1B,CAAC,MAAM,IAAIR,IAAI,KAAK,UAAU,EAAE;UAC9BQ,GAAG,GAAG,oBAAoB;QAC5B,CAAC,MAAM,IAAIR,IAAI,KAAK,SAAS,IAAIC,SAAS,EAAE;UAC1CO,GAAG,GAAI,YAAWP,SAAU,WAAU;QACxC,CAAC,MAAM;UACLQ,OAAO,CAACC,KAAK,CAAC,mCAAmC,CAAC;UAClD;QACF;;QAEA;QACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACJ,GAAG,CAAC;QACjC,MAAMK,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;QAElCV,WAAW,CAACS,IAAI,CAAC;MACnB,CAAC,CAAC,OAAOH,KAAK,EAAE;QACdD,OAAO,CAACC,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;MACjD,CAAC,SAAS;QACRJ,UAAU,CAAC,KAAK,CAAC;MACnB;IACF,CAAC;IAEDC,aAAa,CAAC,CAAC;EACjB,CAAC,EAAE,CAACP,IAAI,EAAEC,SAAS,CAAC,CAAC;EAErB,OAAO;IAAEE,QAAQ;IAAEE;EAAQ,CAAC;AAC9B,CAAC;AAACH,EAAA,CAzCIH,WAAW;AA2CjB,eAAeA,WAAW"},"metadata":{},"sourceType":"module","externalDependencies":[]}