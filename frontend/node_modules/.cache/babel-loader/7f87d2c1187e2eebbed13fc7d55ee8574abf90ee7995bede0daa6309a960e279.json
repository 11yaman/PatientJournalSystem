{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport useAuth from './useAuth';\nimport useApi from './useApi';\nimport { toast } from 'react-toastify';\nconst useMessages = (type, patientId) => {\n  _s();\n  const {\n    get,\n    loading,\n    error\n  } = useApi();\n  const [messages, setMessages] = useState([]);\n  const {\n    user\n  } = useAuth();\n  useEffect(() => {\n    const fetchMessages = async () => {\n      let url;\n      if (type === 'all') {\n        url = '/messages/all';\n      } else if (type === 'active') {\n        url = '/messages/active';\n      } else if (type === 'archived') {\n        url = '/messages/archived';\n      } else if (type === 'patient' && patientId) {\n        url = `/patient/${patientId}/messages`;\n      } else {\n        console.error('Invalid arguments for useMessages');\n        return;\n      }\n      try {\n        if (user && user.token) {\n          const fetchedNotes = await get(`/patients/${patientId}/notes/list`, user.token);\n          if (fetchedNotes) {\n            setMessages(fetchedNotes);\n          } else {\n            toast.error('Error fetching patient messages');\n          }\n        }\n      } catch (apiError) {\n        toast.error('Error fetching patient messages');\n      }\n    };\n    fetchMessages();\n  }, [type, patientId]);\n  return {\n    messages,\n    loading\n  };\n};\n_s(useMessages, \"oBDreevB8HrXmYf3SqPTusmxkK4=\", false, function () {\n  return [useApi, useAuth];\n});\nexport default useMessages;","map":{"version":3,"names":["useState","useEffect","useAuth","useApi","toast","useMessages","type","patientId","_s","get","loading","error","messages","setMessages","user","fetchMessages","url","console","token","fetchedNotes","apiError"],"sources":["C:/Users/Yaman/GitHub/JournalSystem/frontend/src/hooks/useMessages.js"],"sourcesContent":["import { useState, useEffect } from 'react';\r\nimport useAuth from './useAuth';\r\nimport useApi from './useApi';\r\nimport { toast } from 'react-toastify';\r\n\r\nconst useMessages = (type, patientId) => {\r\n  const { get, loading, error } = useApi();\r\n  const [messages, setMessages] = useState([]);\r\n\r\n  const {user} = useAuth()\r\n\r\n  useEffect(() => {\r\n    const fetchMessages = async () => {\r\n      let url;\r\n\r\n      if (type === 'all') {\r\n        url = '/messages/all';\r\n      } else if (type === 'active') {\r\n        url = '/messages/active';\r\n      } else if (type === 'archived') {\r\n        url = '/messages/archived';\r\n      } else if (type === 'patient' && patientId) {\r\n        url = `/patient/${patientId}/messages`;\r\n      } else {\r\n        console.error('Invalid arguments for useMessages');\r\n        return;\r\n      }\r\n      try {\r\n        if (user && user.token ) {\r\n          const fetchedNotes = await get(`/patients/${patientId}/notes/list`, user.token);\r\n\r\n          if (fetchedNotes) {\r\n            setMessages(fetchedNotes);\r\n          } else {\r\n            toast.error('Error fetching patient messages');\r\n          }\r\n        }\r\n      } catch (apiError) {\r\n        toast.error('Error fetching patient messages');\r\n      }\r\n    };\r\n\r\n    fetchMessages();\r\n  }, [type, patientId]);\r\n\r\n  return { messages, loading };\r\n};\r\n\r\nexport default useMessages;"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC3C,OAAOC,OAAO,MAAM,WAAW;AAC/B,OAAOC,MAAM,MAAM,UAAU;AAC7B,SAASC,KAAK,QAAQ,gBAAgB;AAEtC,MAAMC,WAAW,GAAGA,CAACC,IAAI,EAAEC,SAAS,KAAK;EAAAC,EAAA;EACvC,MAAM;IAAEC,GAAG;IAAEC,OAAO;IAAEC;EAAM,CAAC,GAAGR,MAAM,CAAC,CAAC;EACxC,MAAM,CAACS,QAAQ,EAAEC,WAAW,CAAC,GAAGb,QAAQ,CAAC,EAAE,CAAC;EAE5C,MAAM;IAACc;EAAI,CAAC,GAAGZ,OAAO,CAAC,CAAC;EAExBD,SAAS,CAAC,MAAM;IACd,MAAMc,aAAa,GAAG,MAAAA,CAAA,KAAY;MAChC,IAAIC,GAAG;MAEP,IAAIV,IAAI,KAAK,KAAK,EAAE;QAClBU,GAAG,GAAG,eAAe;MACvB,CAAC,MAAM,IAAIV,IAAI,KAAK,QAAQ,EAAE;QAC5BU,GAAG,GAAG,kBAAkB;MAC1B,CAAC,MAAM,IAAIV,IAAI,KAAK,UAAU,EAAE;QAC9BU,GAAG,GAAG,oBAAoB;MAC5B,CAAC,MAAM,IAAIV,IAAI,KAAK,SAAS,IAAIC,SAAS,EAAE;QAC1CS,GAAG,GAAI,YAAWT,SAAU,WAAU;MACxC,CAAC,MAAM;QACLU,OAAO,CAACN,KAAK,CAAC,mCAAmC,CAAC;QAClD;MACF;MACA,IAAI;QACF,IAAIG,IAAI,IAAIA,IAAI,CAACI,KAAK,EAAG;UACvB,MAAMC,YAAY,GAAG,MAAMV,GAAG,CAAE,aAAYF,SAAU,aAAY,EAAEO,IAAI,CAACI,KAAK,CAAC;UAE/E,IAAIC,YAAY,EAAE;YAChBN,WAAW,CAACM,YAAY,CAAC;UAC3B,CAAC,MAAM;YACLf,KAAK,CAACO,KAAK,CAAC,iCAAiC,CAAC;UAChD;QACF;MACF,CAAC,CAAC,OAAOS,QAAQ,EAAE;QACjBhB,KAAK,CAACO,KAAK,CAAC,iCAAiC,CAAC;MAChD;IACF,CAAC;IAEDI,aAAa,CAAC,CAAC;EACjB,CAAC,EAAE,CAACT,IAAI,EAAEC,SAAS,CAAC,CAAC;EAErB,OAAO;IAAEK,QAAQ;IAAEF;EAAQ,CAAC;AAC9B,CAAC;AAACF,EAAA,CAzCIH,WAAW;EAAA,QACiBF,MAAM,EAGvBD,OAAO;AAAA;AAuCxB,eAAeG,WAAW"},"metadata":{},"sourceType":"module","externalDependencies":[]}