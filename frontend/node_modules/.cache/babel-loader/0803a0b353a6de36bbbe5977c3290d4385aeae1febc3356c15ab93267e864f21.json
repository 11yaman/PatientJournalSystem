{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nconst useMessages = patientId => {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    // Simulating fetching messages from an API\n    const fetchMessages = async () => {\n      try {\n        setLoading(true);\n\n        // Here you would perform the actual API call to fetch messages for the specified patient\n        // Replace this with your actual API call\n\n        const response = await fetch(`/api/messages/${patientId}`); // Replace this with your endpoint\n        const data = await response.json();\n        setMessages(data);\n        setLoading(false);\n      } catch (error) {\n        // Handle error state\n        console.error('Error fetching messages:', error);\n        setLoading(false);\n      }\n    };\n    fetchMessages();\n  }, [patientId]);\n  return {\n    messages,\n    loading\n  };\n};\n_s(useMessages, \"iENrkQA4ceL8nzHtV8t1eR+7xGM=\");\nexport default useMessages;","map":{"version":3,"names":["useState","useEffect","useMessages","patientId","_s","messages","setMessages","loading","setLoading","fetchMessages","response","fetch","data","json","error","console"],"sources":["C:/Users/Yaman/GitHub/JournalSystem/frontend/src/hooks/useMessages.js"],"sourcesContent":["import { useState, useEffect } from 'react';\r\n\r\nconst useMessages = (patientId) => {\r\n  const [messages, setMessages] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    // Simulating fetching messages from an API\r\n    const fetchMessages = async () => {\r\n      try {\r\n        setLoading(true);\r\n\r\n        // Here you would perform the actual API call to fetch messages for the specified patient\r\n        // Replace this with your actual API call\r\n\r\n        const response = await fetch(`/api/messages/${patientId}`); // Replace this with your endpoint\r\n        const data = await response.json();\r\n\r\n        setMessages(data);\r\n        setLoading(false);\r\n      } catch (error) {\r\n        // Handle error state\r\n        console.error('Error fetching messages:', error);\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchMessages();\r\n  }, [patientId]);\r\n\r\n  return { messages, loading };\r\n};\r\n\r\nexport default useMessages;\r\n"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAE3C,MAAMC,WAAW,GAAIC,SAAS,IAAK;EAAAC,EAAA;EACjC,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGN,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACO,OAAO,EAAEC,UAAU,CAAC,GAAGR,QAAQ,CAAC,IAAI,CAAC;EAE5CC,SAAS,CAAC,MAAM;IACd;IACA,MAAMQ,aAAa,GAAG,MAAAA,CAAA,KAAY;MAChC,IAAI;QACFD,UAAU,CAAC,IAAI,CAAC;;QAEhB;QACA;;QAEA,MAAME,QAAQ,GAAG,MAAMC,KAAK,CAAE,iBAAgBR,SAAU,EAAC,CAAC,CAAC,CAAC;QAC5D,MAAMS,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;QAElCP,WAAW,CAACM,IAAI,CAAC;QACjBJ,UAAU,CAAC,KAAK,CAAC;MACnB,CAAC,CAAC,OAAOM,KAAK,EAAE;QACd;QACAC,OAAO,CAACD,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;QAChDN,UAAU,CAAC,KAAK,CAAC;MACnB;IACF,CAAC;IAEDC,aAAa,CAAC,CAAC;EACjB,CAAC,EAAE,CAACN,SAAS,CAAC,CAAC;EAEf,OAAO;IAAEE,QAAQ;IAAEE;EAAQ,CAAC;AAC9B,CAAC;AAACH,EAAA,CA7BIF,WAAW;AA+BjB,eAAeA,WAAW"},"metadata":{},"sourceType":"module","externalDependencies":[]}