{"ast":null,"code":"var _s2 = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport { fetchMessageWithReplies } from '../apis/MessageApi';\nimport { toast } from 'react-toastify';\nimport useAuth from './useAuth';\nimport useApi from './useApi';\nconst useMessageWithReplies = messageId => {\n  _s2();\n  const {\n    get,\n    loading,\n    error\n  } = useApi();\n  const [message, setMessage] = useState();\n  const {\n    user\n  } = useAuth();\n  useEffect(() => {\n    var _s = $RefreshSig$();\n    const fetchData = async () => {\n      _s();\n      try {\n        if (user && user.token) {\n          const fetchedMessage = await useApi(`/patients/${messageId}/notes/list`, user.token);\n          if (fetchedMessage) {\n            setMessage(fetchedMessage);\n          } else {\n            toast.error('Error fetching message with replies');\n          }\n        }\n      } catch (apiError) {\n        toast.error('Error fetching message with replies');\n      }\n    };\n\n    // Call the fetchData function when the component mounts or when messageId changes\n    _s(fetchData, \"YdXwqDVp/2jyPTcf46wQe16nqmk=\", false, function () {\n      return [useApi];\n    });\n    fetchData();\n  }, [messageId]);\n\n  // Return the fetched message and loading state\n  return {\n    message,\n    loading\n  };\n};\n_s2(useMessageWithReplies, \"ObZfQB+tqOFWuuOweLsMSl98c9A=\", false, function () {\n  return [useApi, useAuth];\n});\nexport default useMessageWithReplies;","map":{"version":3,"names":["useState","useEffect","fetchMessageWithReplies","toast","useAuth","useApi","useMessageWithReplies","messageId","_s2","get","loading","error","message","setMessage","user","_s","$RefreshSig$","fetchData","token","fetchedMessage","apiError"],"sources":["C:/Users/Yaman/GitHub/JournalSystem/frontend/src/hooks/useMessageWithReplies.js"],"sourcesContent":["import { useState, useEffect } from 'react';\r\nimport { fetchMessageWithReplies } from '../apis/MessageApi';\r\nimport { toast } from 'react-toastify';\r\nimport useAuth from './useAuth';\r\nimport useApi from './useApi';\r\n\r\nconst useMessageWithReplies = (messageId) => {\r\n  const { get, loading, error } = useApi();\r\n  const [message, setMessage] = useState();\r\n\r\n  const {user} = useAuth()\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n\r\n        if (user && user.token) {\r\n          const fetchedMessage = await useApi(`/patients/${messageId}/notes/list`, user.token);\r\n\r\n          if (fetchedMessage) {\r\n            setMessage(fetchedMessage);\r\n          } else {\r\n            toast.error('Error fetching message with replies');\r\n          }\r\n        }\r\n      } catch (apiError) {\r\n        toast.error('Error fetching message with replies');\r\n      } \r\n    };\r\n\r\n    // Call the fetchData function when the component mounts or when messageId changes\r\n    fetchData();\r\n  }, [messageId]);\r\n\r\n  // Return the fetched message and loading state\r\n  return { message, loading };\r\n};\r\n\r\nexport default useMessageWithReplies;\r\n"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC3C,SAASC,uBAAuB,QAAQ,oBAAoB;AAC5D,SAASC,KAAK,QAAQ,gBAAgB;AACtC,OAAOC,OAAO,MAAM,WAAW;AAC/B,OAAOC,MAAM,MAAM,UAAU;AAE7B,MAAMC,qBAAqB,GAAIC,SAAS,IAAK;EAAAC,GAAA;EAC3C,MAAM;IAAEC,GAAG;IAAEC,OAAO;IAAEC;EAAM,CAAC,GAAGN,MAAM,CAAC,CAAC;EACxC,MAAM,CAACO,OAAO,EAAEC,UAAU,CAAC,GAAGb,QAAQ,CAAC,CAAC;EAExC,MAAM;IAACc;EAAI,CAAC,GAAGV,OAAO,CAAC,CAAC;EAExBH,SAAS,CAAC,MAAM;IAAA,IAAAc,EAAA,GAAAC,YAAA;IACd,MAAMC,SAAS,GAAG,MAAAA,CAAA,KAAY;MAAAF,EAAA;MAC5B,IAAI;QAEF,IAAID,IAAI,IAAIA,IAAI,CAACI,KAAK,EAAE;UACtB,MAAMC,cAAc,GAAG,MAAMd,MAAM,CAAE,aAAYE,SAAU,aAAY,EAAEO,IAAI,CAACI,KAAK,CAAC;UAEpF,IAAIC,cAAc,EAAE;YAClBN,UAAU,CAACM,cAAc,CAAC;UAC5B,CAAC,MAAM;YACLhB,KAAK,CAACQ,KAAK,CAAC,qCAAqC,CAAC;UACpD;QACF;MACF,CAAC,CAAC,OAAOS,QAAQ,EAAE;QACjBjB,KAAK,CAACQ,KAAK,CAAC,qCAAqC,CAAC;MACpD;IACF,CAAC;;IAED;IAAAI,EAAA,CAjBME,SAAS;MAAA,QAIoBZ,MAAM;IAAA;IAczCY,SAAS,CAAC,CAAC;EACb,CAAC,EAAE,CAACV,SAAS,CAAC,CAAC;;EAEf;EACA,OAAO;IAAEK,OAAO;IAAEF;EAAQ,CAAC;AAC7B,CAAC;AAACF,GAAA,CA9BIF,qBAAqB;EAAA,QACOD,MAAM,EAGvBD,OAAO;AAAA;AA4BxB,eAAeE,qBAAqB"},"metadata":{},"sourceType":"module","externalDependencies":[]}