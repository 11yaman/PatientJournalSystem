{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Noor\\\\Documents\\\\GitHub\\\\JournalSystem\\\\frontend\\\\src\\\\pages\\\\employee\\\\PatientNotes.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport Spinner from '../../components/Spinner';\nimport usePatientNotes from \"../../hooks/usePatientNotes\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst NoteDetails = () => {\n  _s();\n  const {\n    patientId\n  } = useParams();\n  const {\n    patientNotes,\n    loading\n  } = usePatientNotes(patientId);\n  const [notes, setNotes] = useState([]);\n  const mockNotes = [{\n    id: 1,\n    text: 'Patient has fever. Prescribed antibiotics.',\n    dateTimeCreated: '2023-11-05T17:31:52.384',\n    employee: {\n      id: 1,\n      email: 'john@example.com',\n      firstName: 'John',\n      lastName: 'Doe',\n      role: 'DOCTOR'\n    },\n    patient: {\n      id: 1,\n      name: 'Jane Doe',\n      username: 'jane@example.com',\n      age: 25,\n      diagnosis: 'Fever'\n    },\n    encounter: {\n      id: 1,\n      type: 'Follow-up',\n      dateTime: '2023-11-05T18:00:00.000'\n    }\n  }, {\n    id: 2,\n    text: 'Patient reports improvement. Continue with prescribed medication.',\n    dateTimeCreated: '2023-11-06T09:15:00.000',\n    employee: {\n      id: 1,\n      email: 'john@example.com',\n      firstName: 'John',\n      lastName: 'Doe',\n      role: 'DOCTOR'\n    },\n    patient: {\n      id: 1,\n      name: 'Jane Doe',\n      username: 'jane@example.com',\n      age: 25,\n      diagnosis: 'Fever'\n    },\n    encounter: {\n      id: 1,\n      type: 'Follow-up',\n      dateTime: '2023-11-07T10:00:00.000'\n    }\n  }, {\n    id: 3,\n    text: 'Patient presents with cough and sore throat. Prescribed cough syrup and rest.',\n    dateTimeCreated: '2023-11-08T14:45:00.000',\n    employee: {\n      id: 2,\n      email: 'emily@example.com',\n      firstName: 'Emily',\n      lastName: 'Smith',\n      role: 'DOCTOR'\n    },\n    patient: {\n      id: 2,\n      name: 'John Smith',\n      username: 'john@example.com',\n      age: 32,\n      diagnosis: 'Respiratory Infection'\n    },\n    encounter: {\n      id: 2,\n      type: 'Initial Consultation',\n      dateTime: '2023-11-08T15:00:00.000'\n    }\n  }];\n  useEffect(() => {\n    setNotes(mockNotes);\n  }, [patientId]);\n  const renderNotes = note => /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"ml-3 bg-light p-3 rounded\",\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Doctor: \", note.employee.firstName, \" \", note.employee.lastName, \" (\", note.employee.email, \")\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: note.text\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Created at: \", new Date(note.dateTimeCreated).toLocaleString()]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Patient: \", note.patient.name, \" (\", note.patient.username, \"), Age: \", note.patient.age, \", Diagnosis: \", note.patient.diagnosis]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 13\n    }, this), note.encounter && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Encounter: \", note.encounter.type, \" at \", new Date(note.encounter.dateTime).toLocaleString()]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 17\n    }, this)]\n  }, note.id, true, {\n    fileName: _jsxFileName,\n    lineNumber: 92,\n    columnNumber: 9\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Note details\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 13\n    }, this), loading ? /*#__PURE__*/_jsxDEV(Spinner, {\n      splash: \"Loading Note Details...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: notes ? renderNotes(notes) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Note not found\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 51\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 110,\n    columnNumber: 9\n  }, this);\n};\n_s(NoteDetails, \"CM2l4WxWE99xSj1JU0eTxsRVDzs=\", false, function () {\n  return [useParams, usePatientNotes];\n});\n_c = NoteDetails;\nexport default NoteDetails;\nvar _c;\n$RefreshReg$(_c, \"NoteDetails\");","map":{"version":3,"names":["React","useEffect","useState","useParams","Spinner","usePatientNotes","jsxDEV","_jsxDEV","NoteDetails","_s","patientId","patientNotes","loading","notes","setNotes","mockNotes","id","text","dateTimeCreated","employee","email","firstName","lastName","role","patient","name","username","age","diagnosis","encounter","type","dateTime","renderNotes","note","className","children","fileName","_jsxFileName","lineNumber","columnNumber","Date","toLocaleString","splash","_c","$RefreshReg$"],"sources":["C:/Users/Noor/Documents/GitHub/JournalSystem/frontend/src/pages/employee/PatientNotes.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport Spinner from '../../components/Spinner';\r\nimport usePatientNotes from \"../../hooks/usePatientNotes\";\r\n\r\nconst NoteDetails = () => {\r\n    const { patientId } = useParams();\r\n\r\n    const { patientNotes, loading } = usePatientNotes(patientId);\r\n    const [notes, setNotes] = useState([]);\r\n\r\n    const mockNotes = [\r\n        {\r\n            id: 1,\r\n            text: 'Patient has fever. Prescribed antibiotics.',\r\n            dateTimeCreated: '2023-11-05T17:31:52.384',\r\n            employee: {\r\n                id: 1,\r\n                email: 'john@example.com',\r\n                firstName: 'John',\r\n                lastName: 'Doe',\r\n                role: 'DOCTOR',\r\n            },\r\n            patient: {\r\n                id: 1,\r\n                name: 'Jane Doe',\r\n                username: 'jane@example.com',\r\n                age: 25,\r\n                diagnosis: 'Fever',\r\n            },\r\n            encounter: {\r\n                id: 1,\r\n                type: 'Follow-up',\r\n                dateTime: '2023-11-05T18:00:00.000',\r\n            },\r\n        },\r\n        {\r\n            id: 2,\r\n            text: 'Patient reports improvement. Continue with prescribed medication.',\r\n            dateTimeCreated: '2023-11-06T09:15:00.000',\r\n            employee: {\r\n                id: 1,\r\n                email: 'john@example.com',\r\n                firstName: 'John',\r\n                lastName: 'Doe',\r\n                role: 'DOCTOR',\r\n            },\r\n            patient: {\r\n                id: 1,\r\n                name: 'Jane Doe',\r\n                username: 'jane@example.com',\r\n                age: 25,\r\n                diagnosis: 'Fever',\r\n            },\r\n            encounter: {\r\n                id: 1,\r\n                type: 'Follow-up',\r\n                dateTime: '2023-11-07T10:00:00.000',\r\n            },\r\n        },\r\n        {\r\n            id: 3,\r\n            text: 'Patient presents with cough and sore throat. Prescribed cough syrup and rest.',\r\n            dateTimeCreated: '2023-11-08T14:45:00.000',\r\n            employee: {\r\n                id: 2,\r\n                email: 'emily@example.com',\r\n                firstName: 'Emily',\r\n                lastName: 'Smith',\r\n                role: 'DOCTOR',\r\n            },\r\n            patient: {\r\n                id: 2,\r\n                name: 'John Smith',\r\n                username: 'john@example.com',\r\n                age: 32,\r\n                diagnosis: 'Respiratory Infection',\r\n            },\r\n            encounter: {\r\n                id: 2,\r\n                type: 'Initial Consultation',\r\n                dateTime: '2023-11-08T15:00:00.000',\r\n            },\r\n        },\r\n    ];\r\n\r\n    useEffect(() => {\r\n        setNotes(mockNotes)\r\n    }, [patientId]);\r\n\r\n    const renderNotes = (note) => (\r\n        <div key={note.id} className='ml-3 bg-light p-3 rounded'>\r\n            <p>\r\n                Doctor: {note.employee.firstName} {note.employee.lastName} ({note.employee.email})\r\n            </p>\r\n            <p>{note.text}</p>\r\n            <p>Created at: {new Date(note.dateTimeCreated).toLocaleString()}</p>\r\n            <p>\r\n                Patient: {note.patient.name} ({note.patient.username}), Age: {note.patient.age}, Diagnosis: {note.patient.diagnosis}\r\n            </p>\r\n            {note.encounter && (\r\n                <p>\r\n                    Encounter: {note.encounter.type} at {new Date(note.encounter.dateTime).toLocaleString()}\r\n                </p>\r\n            )}\r\n        </div>\r\n    );\r\n\r\n    return (\r\n        <div>\r\n            <h1>Note details</h1>\r\n            {loading ? (\r\n                <Spinner splash=\"Loading Note Details...\" />\r\n            ) : (\r\n                <div>\r\n                    {notes ? renderNotes(notes) : <p>Note not found</p>}\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default NoteDetails;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}