{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Yaman\\\\GitHub\\\\JournalSystem\\\\frontend\\\\src\\\\pages\\\\employee\\\\MessageDetails.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MessageReplies = () => {\n  _s();\n  const {\n    messageId\n  } = useParams(); // Assuming you get the messageId from the URL\n  const [messageWithReplies, setMessageWithReplies] = useState([]);\n\n  // Fetch message with replies\n  const mockMessageWithReplies = [{\n    \"id\": 1,\n    \"content\": \"hej\",\n    \"dateTime\": \"2023-11-05T17:31:52.384\",\n    \"sender\": {\n      \"id\": 1,\n      \"email\": \"yaman\",\n      \"firstName\": \"Yaman\",\n      \"lastName\": \"A\",\n      \"role\": \"PATIENT\"\n    },\n    \"status\": \"ACTIVE\",\n    \"replies\": [{\n      \"id\": 6,\n      \"content\": \"reply\",\n      \"dateTime\": \"2023-11-10T22:59:01.052195\",\n      \"user\": {\n        \"id\": 1,\n        \"email\": \"yaman\",\n        \"firstName\": \"Yaman\",\n        \"lastName\": \"A\",\n        \"role\": \"PATIENT\"\n      }\n    }, {\n      \"id\": 7,\n      \"content\": \"reply\",\n      \"dateTime\": \"2023-11-10T23:01:29.942987\",\n      \"user\": {\n        \"id\": 1,\n        \"email\": \"yaman\",\n        \"firstName\": \"Yaman\",\n        \"lastName\": \"A\",\n        \"role\": \"PATIENT\"\n      }\n    }]\n  }];\n  useEffect(() => {\n    // Fetch messageWithReplies data for the specific message using 'messageId'\n    // For this example, setting the mock messageWithReplies for the specified message\n    setMessageWithReplies(mockMessageWithReplies);\n  }, [messageId]);\n  const renderMessage = message => /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      children: message.sender.role === 'PATIENT' ? 'Sent by Patient:' : `Reply by Employee: ${message.sender.firstName} (${message.sender.email})`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: message.content\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Sent at: \", message.dateTime]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this), message.replies && message.replies.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginLeft: '20px'\n      },\n      children: message.replies.map(reply => renderMessage(reply))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 9\n    }, this)]\n  }, message.id, true, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 5\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Conversation\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [conversation.map(message => renderMessage(message)), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"Type your reply\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          children: \"Reply\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 5\n  }, this);\n};\n_s(MessageReplies, \"T+q2iJ/vaJsyL12DFCsCbjyaORo=\", false, function () {\n  return [useParams];\n});\n_c = MessageReplies;\nexport default Conversation;\nvar _c;\n$RefreshReg$(_c, \"MessageReplies\");","map":{"version":3,"names":["React","useEffect","useState","useParams","jsxDEV","_jsxDEV","MessageReplies","_s","messageId","messageWithReplies","setMessageWithReplies","mockMessageWithReplies","renderMessage","message","children","sender","role","firstName","email","fileName","_jsxFileName","lineNumber","columnNumber","content","dateTime","replies","length","style","marginLeft","map","reply","id","conversation","type","placeholder","_c","Conversation","$RefreshReg$"],"sources":["C:/Users/Yaman/GitHub/JournalSystem/frontend/src/pages/employee/MessageDetails.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\n\r\nconst MessageReplies = () => {\r\n  const { messageId } = useParams(); // Assuming you get the messageId from the URL\r\n  const [messageWithReplies, setMessageWithReplies] = useState([]);\r\n\r\n  // Fetch message with replies\r\n  const mockMessageWithReplies = [\r\n    {\r\n      \"id\": 1,\r\n      \"content\": \"hej\",\r\n      \"dateTime\": \"2023-11-05T17:31:52.384\",\r\n      \"sender\": {\r\n          \"id\": 1,\r\n          \"email\": \"yaman\",\r\n          \"firstName\": \"Yaman\",\r\n          \"lastName\": \"A\",\r\n          \"role\": \"PATIENT\"\r\n      },\r\n      \"status\": \"ACTIVE\",\r\n      \"replies\": [\r\n          {\r\n              \"id\": 6,\r\n              \"content\": \"reply\",\r\n              \"dateTime\": \"2023-11-10T22:59:01.052195\",\r\n              \"user\": {\r\n                  \"id\": 1,\r\n                  \"email\": \"yaman\",\r\n                  \"firstName\": \"Yaman\",\r\n                  \"lastName\": \"A\",\r\n                  \"role\": \"PATIENT\"\r\n              }\r\n          },\r\n          {\r\n              \"id\": 7,\r\n              \"content\": \"reply\",\r\n              \"dateTime\": \"2023-11-10T23:01:29.942987\",\r\n              \"user\": {\r\n                  \"id\": 1,\r\n                  \"email\": \"yaman\",\r\n                  \"firstName\": \"Yaman\",\r\n                  \"lastName\": \"A\",\r\n                  \"role\": \"PATIENT\"\r\n              }\r\n          }\r\n      ]\r\n    },\r\n  ];\r\n\r\n  useEffect(() => {\r\n    // Fetch messageWithReplies data for the specific message using 'messageId'\r\n    // For this example, setting the mock messageWithReplies for the specified message\r\n    setMessageWithReplies(mockMessageWithReplies);\r\n  }, [messageId]);\r\n\r\n  const renderMessage = (message) => (\r\n    <div key={message.id}>\r\n      <p>\r\n        {message.sender.role === 'PATIENT'\r\n          ? 'Sent by Patient:'\r\n          : `Reply by Employee: ${message.sender.firstName} (${message.sender.email})`}\r\n      </p>\r\n      <p>{message.content}</p>\r\n      <p>Sent at: {message.dateTime}</p>\r\n      {message.replies && message.replies.length > 0 && (\r\n        <div style={{ marginLeft: '20px' }}>\r\n          {message.replies.map((reply) => renderMessage(reply))}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n\r\n  return (\r\n    <div>\r\n      <h1>Conversation</h1>\r\n      <div>\r\n        {conversation.map((message) => renderMessage(message))}\r\n        {/* Add a reply field for the logged-in user (Employee) */}\r\n        <div>\r\n          <input type=\"text\" placeholder=\"Type your reply\" />\r\n          <button>Reply</button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Conversation;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}