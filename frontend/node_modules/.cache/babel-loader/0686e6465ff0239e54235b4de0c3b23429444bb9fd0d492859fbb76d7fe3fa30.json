{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Yaman\\\\GitHub\\\\JournalSystem\\\\frontend\\\\src\\\\pages\\\\employee\\\\PatientNotes.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport Spinner from '../../components/Spinner';\nimport useNotes from \"../../hooks/useNotes\";\nimport { toast } from 'react-toastify';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Notes = () => {\n  _s();\n  const {\n    patientId\n  } = useParams();\n  const {\n    notes: patientNotes,\n    loading\n  } = useNotes(patientId);\n  const [notes, setNotes] = useState([]);\n  const navigate = useNavigate();\n  const [content, setContent] = useState(''); // State to hold the content of the new note\n\n  useEffect(() => {\n    setNotes(patientNotes);\n  }, [patientId, patientNotes]);\n  const handleCreateNote = async () => {\n    if (!text) {\n      toast.error('Please fill in requierd field');\n      return;\n    }\n    try {\n      const result = await post(`/patients/${patientId}/notes`, {\n        text: text\n      }, user.token);\n      console.log(result);\n      if (result) {\n        toast.success('Note created successfully');\n        navigate('/');\n      } else {\n        toast.error('Error creating note');\n      }\n    } catch (err) {\n      toast.error('Error creating note');\n    }\n  };\n  const renderNotes = note => /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"ml-3 bg-light p-3 rounded mb-3\",\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Written by: \", note.employee.firstName, \" \", note.employee.lastName, \" (\", note.employee.email, \")\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: note.text\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 13\n    }, this), note.encounter && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Encounter: \", note.encounter.toLocaleString()]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Created at: \", new Date(note.dateTimeCreated).toLocaleString()]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 13\n    }, this)]\n  }, note.id, true, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 9\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Notes for patient\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 13\n    }, this), loading ? /*#__PURE__*/_jsxDEV(Spinner, {\n      splash: \"Loading Note Details...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [notes.map(note => renderNotes(note)), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mt-3\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"Type new note\",\n          className: \"form-control\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn btn-primary my-3\",\n          onClick: handleCreateNote,\n          children: \"New Note\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 9\n  }, this);\n};\n_s(Notes, \"sWpx+ae5vMgjcpX36NF8XO+j7yc=\", false, function () {\n  return [useParams, useNotes, useNavigate];\n});\n_c = Notes;\nexport default Notes;\nvar _c;\n$RefreshReg$(_c, \"Notes\");","map":{"version":3,"names":["React","useEffect","useState","useNavigate","useParams","Spinner","useNotes","toast","jsxDEV","_jsxDEV","Notes","_s","patientId","notes","patientNotes","loading","setNotes","navigate","content","setContent","handleCreateNote","text","error","result","post","user","token","console","log","success","err","renderNotes","note","className","children","employee","firstName","lastName","email","fileName","_jsxFileName","lineNumber","columnNumber","encounter","toLocaleString","Date","dateTimeCreated","id","splash","map","type","placeholder","onClick","_c","$RefreshReg$"],"sources":["C:/Users/Yaman/GitHub/JournalSystem/frontend/src/pages/employee/PatientNotes.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { useNavigate, useParams } from 'react-router-dom';\r\nimport Spinner from '../../components/Spinner';\r\nimport useNotes from \"../../hooks/useNotes\";\r\nimport { toast } from 'react-toastify';\r\n\r\nconst Notes = () => {\r\n    const { patientId } = useParams();\r\n\r\n    const { notes : patientNotes, loading } = useNotes(patientId);\r\n    const [notes, setNotes] = useState([]);\r\n    const navigate = useNavigate();\r\n    const [content, setContent] = useState(''); // State to hold the content of the new note\r\n\r\n    useEffect(() => {\r\n        setNotes(patientNotes)\r\n    }, [patientId, patientNotes]);\r\n\r\n    const handleCreateNote = async () => {\r\n        if (!text) {\r\n          toast.error('Please fill in requierd field');\r\n          return;\r\n        }\r\n        try{\r\n          const result = await post(`/patients/${patientId}/notes`, {text : text}, user.token);\r\n          console.log(result);\r\n    \r\n          if (result) {\r\n            toast.success('Note created successfully');\r\n            navigate('/');\r\n          } else {\r\n            toast.error('Error creating note');\r\n          }\r\n        } catch (err) {\r\n            toast.error('Error creating note')\r\n        }\r\n      };\r\n\r\n    const renderNotes = (note) => (\r\n        <div key={note.id} className='ml-3 bg-light p-3 rounded mb-3'>\r\n            <p>\r\n                Written by: {note.employee.firstName} {note.employee.lastName} ({note.employee.email})\r\n            </p>\r\n            <p>{note.text}</p>\r\n            {note.encounter && (\r\n                <p>\r\n                    Encounter: {note.encounter.toLocaleString()}\r\n                </p>\r\n            )}\r\n            <p>Created at: {new Date(note.dateTimeCreated).toLocaleString()}</p>\r\n        </div>\r\n    );\r\n\r\n    return (\r\n        <div>\r\n            <h1>Notes for patient</h1>\r\n            {loading ? (\r\n                <Spinner splash=\"Loading Note Details...\" />\r\n            ) : (\r\n                <div>\r\n                    {notes.map((note) => renderNotes(note))}\r\n                    <div className=\"mt-3\">\r\n                        <input type=\"text\" placeholder=\"Type new note\" className=\"form-control\" />\r\n                        <button className=\"btn btn-primary my-3\" onClick={handleCreateNote}>\r\n                          New Note\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Notes;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}